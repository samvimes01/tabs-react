{"version":3,"sources":["Tabs.js","Tab.js","App.js","serviceWorker.js","index.js"],"names":["Tabs","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleTabClick","title","arguments","length","undefined","text","setState","visibleTabId","onTabSelected","tabElements","children","map","child","state","_this2","tabs","tab","react_default","a","createElement","key","className","onClick","visibleTab","filter","React","Component","Tab","App","src_Tabs","data","console","log","src_Tab","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yNAwDeA,cArDb,SAAAA,EAAYC,GAAO,IAAAC,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAiBRQ,eAAiB,WAA0C,IAAzCC,EAAyCC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAjC,WAAYG,EAAqBH,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAd,UAC3CT,EAAKa,SAAS,CAAEC,aAAcN,IAE1BR,EAAKD,MAAMgB,eACbf,EAAKD,MAAMgB,cAAc,CAACP,QAAOI,UApBnC,IAAMI,EAAcjB,EAAMkB,SAASC,IAAI,SAAAC,GACrC,MACE,CACEX,MAAOW,EAAMpB,MAAMS,MACnBI,KAAMO,EAAMpB,MAAMkB,YANP,OAWjBjB,EAAKoB,MAAQ,CACXN,aAAcE,EAAY,GAAGR,MAC7BQ,eAbehB,wEA0BV,IAAAqB,EAAAlB,KACDmB,EAAOnB,KAAKiB,MAAMJ,YAAYE,IAAI,SAAAK,GAEtC,OACEC,EAAAC,EAAAC,cAAA,UACEC,IAAKJ,EAAIf,MACToB,UAAWL,EAAIf,QAAUa,EAAKD,MAAMN,aAAe,SAAW,GAC9De,QAAS,kBAAMR,EAAKd,eAAegB,EAAIf,MAAOe,EAAIX,QAEjDW,EAAIf,SAKLsB,EAAa3B,KAAKJ,MAAMkB,SAASc,OAAO,SAAAR,GAAG,OAAIA,EAAIxB,MAAMS,QAAUa,EAAKD,MAAMN,eAEpF,OACAU,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAKE,UAAU,aACZN,GAEFQ,UAhDYE,IAAMC,WCQVC,MARf,SAAanC,GACX,OACEyB,EAAAC,EAAAC,cAAA,OAAKE,UAAU,cACZ7B,EAAMkB,WCiCEkB,0LA/BX,OACEX,EAAAC,EAAAC,cAAA,OAAKE,UAAU,OACbJ,EAAAC,EAAAC,cAAA,UAAQE,UAAU,cAAlB,6BAIAJ,EAAAC,EAAAC,cAAA,QAAME,UAAU,YAEdJ,EAAAC,EAAAC,cAACU,EAAD,CACErB,cAAe,SAACsB,GACdC,QAAQC,IAAIF,EAAK7B,MAAO6B,EAAKzB,QAG/BY,EAAAC,EAAAC,cAACc,EAAD,CAAKhC,MAAM,UAAX,0CACAgB,EAAAC,EAAAC,cAACc,EAAD,CAAKhC,MAAM,SAAX,mCACAgB,EAAAC,EAAAC,cAACc,EAAD,CAAKhC,MAAM,SAAX,mCAGFgB,EAAAC,EAAAC,cAACU,EAAD,KACEZ,EAAAC,EAAAC,cAACc,EAAD,CAAKhC,MAAM,SAAX,eACAgB,EAAAC,EAAAC,cAACc,EAAD,CAAKhC,MAAM,SAAX,eACAgB,EAAAC,EAAAC,cAACc,EAAD,CAAKhC,MAAM,SAAX,yBAvBMyB,cCOEQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOvB,EAAAC,EAAAC,cAACsB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.af8f7c8e.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nclass Tabs extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    const tabElements = props.children.map(child => {\r\n      return (\r\n        {\r\n          title: child.props.title,\r\n          text: child.props.children,\r\n        }\r\n      );\r\n    })\r\n\r\n    this.state = {\r\n      visibleTabId: tabElements[0].title,\r\n      tabElements,\r\n    }\r\n  }\r\n\r\n\r\n  handleTabClick = (title = 'no title', text = 'no text') => {\r\n    this.setState({ visibleTabId: title });\r\n\r\n    if (this.props.onTabSelected) {\r\n      this.props.onTabSelected({title, text});\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const tabs = this.state.tabElements.map(tab =>\r\n    {\r\n      return (\r\n        <button \r\n          key={tab.title}\r\n          className={tab.title === this.state.visibleTabId ? 'active' : ''}\r\n          onClick={() => this.handleTabClick(tab.title, tab.text)}\r\n        >\r\n          {tab.title}\r\n        </button>\r\n      );\r\n    });\r\n\r\n    const visibleTab = this.props.children.filter(tab => tab.props.title === this.state.visibleTabId);\r\n\r\n    return (\r\n    <div>\r\n      <div className=\"tabs-list\">\r\n        {tabs}\r\n      </div>\r\n      {visibleTab}\r\n    </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Tabs;\r\n","import React from 'react';\r\n\r\nfunction Tab(props) {\r\n  return (\r\n    <div className=\"tabcontent\">\r\n      {props.children}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Tab;\r\n","import React, { Component } from 'react';\nimport Tabs from './Tabs';\nimport Tab from './Tab';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"app\">\n        <header className=\"app-header\">\n          Tabs advanced with react.\n        </header>\n        \n        <main className=\"app-main\">\n\n          <Tabs \n            onTabSelected={(data) => {\n              console.log(data.title, data.text);\n            }}\n          >\n            <Tab title=\"London\">London is the capital city of England.</Tab>\n            <Tab title=\"Paris\">Paris is the capital of France.</Tab>\n            <Tab title=\"Tokyo\">Tokyo is the capital of Japan.</Tab>\n          </Tabs>\n          \n          <Tabs>\n            <Tab title=\"Tab 1\">Some text 1</Tab>\n            <Tab title=\"Tab 2\">Some text 2</Tab>\n            <Tab title=\"Tab 3\">Some text 3</Tab>\n          </Tabs>\n\n        </main> \n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}